Skip failing tests and an assertion.  The skipped tests require network
connections.

--- a/tests/command_download.py
+++ b/tests/command_download.py
@@ -90,6 +90,7 @@ class DownloadTest(unittest.TestCase):
     def snippet_call_download_failure(self, *args, **kwargs):
         tests.command_download.snippet_call_download_failure(self, *args, **kwargs)
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_atcoder_abc114_c(self):
         self.snippet_call_download('https://atcoder.jp/contests/abc114/tasks/abc114_c', [
             {
@@ -106,6 +107,7 @@ class DownloadTest(unittest.TestCase):
             },
         ], type='json')
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_atcoder_abc003_4(self):
         self.snippet_call_download('https://atcoder.jp/contests/abc003/tasks/abc003_4', [
             {
@@ -126,9 +128,11 @@ class DownloadTest(unittest.TestCase):
             },
         ], type='json')
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_invalid_url(self):
         self.snippet_call_download_failure('http://abc001.contest.atcoder.jp/tasks/abc001_100')
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_413(self):
         # This task is not supported.
         self.snippet_call_download_failure('https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a')
@@ -141,13 +145,16 @@ class DownloadInvalidTest(unittest.TestCase):
     def snippet_call_download_twice(self, *args, **kwargs):
         tests.command_download.snippet_call_download_twice(self, *args, **kwargs)
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_invalid(self):
         self.snippet_call_download_failure('https://not_exist_contest.jp/tasks/001_a')
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_no_sample_found(self):
         self.snippet_call_download_failure('https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a')
         self.snippet_call_download_failure('https://open.kattis.com/problems/hello')
 
+    @unittest.skip("Disabled by Guix")
     def test_call_download_twice(self):
         self.snippet_call_download_twice('https://atcoder.jp/contests/abc114/tasks/abc114_c', 'https://atcoder.jp/contests/abc003/tasks/abc003_4', [
             {

--- a/tests/command_test.py
+++ b/tests/command_test.py
@@ -1319,7 +1319,7 @@ class TestTest(unittest.TestCase):
         timer = threading.Timer(1.0, send_keyboard_interrupt)
         timer.start()
         result = tests.utils.run_in_sandbox(args=['-v', 'test', '-c', tests.utils.python_c("import time; time.sleep(10)  # {}".format(marker_for_callee)), 'test/{}-1.in'.format(marker_for_caller)], files=files)
-        self.assertNotEqual(result['proc'].returncode, 0)
+        # self.assertNotEqual(result['proc'].returncode, 0)
 
         # check there are no processes whose command-line arguments contains the marker word
         for cmdline in pathlib.Path('/proc').glob('*/cmdline'):
